**Возможности SSH**

* Позволяет удаленно работать на компьютере через командную оболочку.
* Позволяет осуществлять шифрование с помощью различных алгоритмов.
* Так как SSH позволяет безопасно передавать практически любой сетевой протокол, это позволяет передавать по шифрованному каналу звуковые и видео файлы.
*	Производит сжатие файлов для их последующего шифрования и передачи.
*	Защищает передачу данных по каналу и предотвращает возможность включения в установленную сессию и перехватить данные.
Необходимое ПО для работы с SSH
Для работы с SSH необходим SSH-сервер и SSH-клиент.
SSH-сервер принимает соединение от клиентских машин и производит аутентификацию. Аутентификация на SSH производится тремя способами:
*	По IP адресу клиента – при этом SSH использует несколько методов проверки. Способ не очень безопасный, так как существует возможность подмены IP адреса.
*	По публичному ключу клиента – схема почти такая же, как при проверке IP адреса клиентской машины, только в данном случае проверяется ключ клиента и имя пользователя.
*	По паролю клиента – часто используемый метод проверки. Пароль в данном случае передается также в зашифрованном виде.
Основными программными платформами, выступающими в роли SSH-сервера являются:
*	BSD: OpenSSH
*	Linux: dropbear, lsh-server, openssh-server, ssh
*	Windows: freeSSHd, copssh, WinSSHD, KpyM Telnet/SSH Server, MobaSSH, OpenSSH
SSH-клиент используется для непосредственного входа на удаленный сервер и выполнения различных команд:
*	Работа с файлами и директориями
*	Работа по просмотру или редактированию файлов
*	Отслеживание процессов работы
*	Работа с архивами
*	Работа с базами данных MySQL
SSH-клиенты и их программные оболочки:
*	GNU/Linux, BSD: kdessh, lsh-client, openssh-client, putty, ssh, Vinagre
*	MS Windows и Windows NT: PuTTY, SecureCRT, ShellGuard, Axessh, ZOC, SSHWindows, ProSSHD, XShell
*	MS Windows Mobile: PocketPuTTy, mToken, sshCE, PocketTTY, OpenSSH, PocketConsole
*	Mac OS: NiftyTelnet SSH
*	Java: MindTerm, AppGate Security Server
*	iPhone: i-SSH, ssh (в комплекте с Terminal)
*	Android: connectBot

Главным преимуществом SSH над его предшественниками является использование шифрования для защиты передачи данных между хостом и клиентом. Хост – это удаленный сервер к которому необходимо получить доступ, тогда как клиент – это компьютер с которого вы пытаетесь получить доступ к хосту. 

Технологии шифрования
'''''''''''''''''''''''

Технологии шифрования, используемые в SSH:

*	Симметричное шифрование
*	Асимметричное шифрование
*	Хеширование

**Симметричное шифрование**

Симметричное шифрование – это форма шифрования, где секретный ключ используется для шифрования и дешифровки сообщения как клиентом, так и хостом. Любой клиент имеющий ключ, может дешифровать передаваемое сообщение. 

.. figure::img/ssh_01.png
       :scale: 100 %
       :align: center
       :alt: asda

В симметричном шифровании обычно используется один ключ или пара ключей, где один ключ может быть легко вычислен с помощью другого.
Симметричные ключи используются для шифрования всего сообщения в течение SSH сессии. И клиент, и сервер получают ключ согласованным методом, и данный ключ никогда не разглашается третьим лицам. Процесс создания симметричного ключа осуществляется при помощи алгоритма обмена ключами. Что делает этот способ шифрования в некотором смысле безопасным, так это то, что ключ никогда не передаётся от клиента к хосту. Наоборот, оба компьютера делят части публичной информации и используют её для вычисления ключа. Даже если другая машина сможет перехватить информацию, она не сможет вычислить ключ, потому что алгоритм обмена ключом будет неизвестен.

Для каждой SSH сессии создается свой секретный токен (ключ), который генерируется до авторизации клиента. Как только ключ был сгенерирован, все пакеты должны быть зашифрованы приватным ключом. Это включает в себя пароль вписанный пользователем в консоль, таким образом личные данные всегда защищены от анализаторов трафика (снифферов).

Существует разные шифры симметричного шифрования, включая AES (Advanced Encryption Standard), CAST128, Blowfish и т.д. Перед установкой защищённого соединения, клиет и хост решают какой из шифров использовать, создавая список поддерживаемых шифров в порядке их предпочтительности. Самый предпочтительный шифр из списка клиента, который присутствует в списке хоста будет использоваться в качестве двунаправленного шифра.

Например, если две машины Ubuntu передают друг другу данные с помощью SSH, то будет использоваться aes128-ctr в качестве шифра по умолчанию.

**Асимметричное шифрование**

В отличии от симметричного шифрования, асимметричное использует два отдельных ключа для шифрования и дешифровки. Эти два ключа также известны как **приватный** и **публичный ключи**. Вместе они формируют пару публичных-приватных ключей.


.. figure::img/ssh_02.png
       :scale: 100 %
       :align: center
       :alt: asda

Публичный ключ свободно распространяется между всеми группами. Однако, приватный ключ не может быть математически вычислен с помощью публичного. Сообщение, которое зашифровано публичным ключом машины может быть расшифровано лишь приватным ключом той же машины. Эти односторонние отношения означают, что публичный ключ не может дешифровать свои же сообщения, также как не может расшифровать ничего зашифрованного приватным ключом.

Приватный ключ должен оставаться приватным для сохранения защищённости соединения, никакие третьи лица не должны его знать. Надёжность всего этого зашифрованного соединения заключается в том, что приватный ключ никогда не показывается, так как это единственный компонент, который способен расшифровать сообщения зашифрованные публичным ключом. Поэтому любая группа имеющая возможность расшифровать сообщение в таком типе шифрования должна обладать соответствующим приватным ключом.

Асимметричное шифрование не используется для шифрования всей SSH сессии. Вместо этого оно используется только в процессе алгоритма обмена ключами симметричного шифрования. Перед налаживанием защищённого соединения, обе группы генерируют временные пары публично-приватных ключей и делятся приватным ключами для создания общего секретного ключа.

После того как симметричное соединение будет установлено, сервер использует публичный ключ и передаёт его клиенту для авторизации. Если клиент может успешно расшифровать сообщение значит это означает, что он обладает приватным ключом, который необходим для подключения. После этого начинается SSH сессия.

**Хеширование**

Одностороннее хеширование – это еще одна форма криптографии, которая используется в SSH. Хеширование не предназначено для дешифровки. Оно создает уникальное значение фиксированной длины для каждого набора и не имеет никаких последовательностей для дешифровки. Это делает практически невозможным его обратное преобразования. 

.. figure::img/ssh_03.png
       :scale: 100 %
       :align: center
       :alt: asda

Создать криптографический хеш из заданного значения довольно легко, но получить значение из хеша невозможно. Это означает, что если клиент обладает нужным значением, он может генерировать криптографический хеш и сравнить его значение со значением сервера, чтобы проверить совпадают ли они.

Исходные данные называются входным массивом, «ключом» или «сообщением». Результат преобразования (выходные данные) называется «хешем», «хеш-кодом», «хеш-суммой», «сводкой сообщения».
При изменении исходного текста даже на один знак результат хеш-функции полностью меняется.

Это свойство хеш-функций позволяет применять их в следующих случаях:

* при построении ассоциативных массивов;
* при поиске дубликатов в сериях наборов данных;
* при построении уникальных идентификаторов для наборов данных;
* при вычислении контрольных сумм от данных (сигнала) для последующего обнаружения в них ошибок (возникших случайно или внесённых намеренно), возникающих при хранении и/или передаче данных;
* при сохранении паролей в системах защиты в виде хеш-кода (для восстановления пароля по хеш-коду требуется функция, являющаяся обратной по отношению к использованной хеш-функции);
* при выработке электронной подписи (на практике часто подписывается не само сообщение, а его «хеш-образ»);
* и др.

SSH использует хеши для подтверждения сообщений об аутентификации. Это делается при помощи HMACs или Hash-based Message Authentication Codes (Кода Аутентификации Сообщений, Использующего Хеш-функции). Это обеспечивает подлинность полученной команды.

Если выбран необходимый алгоритм симметричного шифрования, это означает, что также выбран подходящий алгоритм аутентификации сообщений.
Каждое переданное сообщение должно содержать MAC, который рассчитывается с помощью симметричного ключа, порядкового номера пакета и содержимого сообщения. Оно отправляется извне симметрично зашифрованных данных в качестве итогового раздела пакета связи.

.. figure::img/ssh_04.png
       :scale: 100 %
       :align: center
       :alt: asda






