Playbooks
~~~~~~~~~~~

Playbooks Ansible предлагают воспроизводимую, многократно используемую, простую систему управления конфигурацией и развертывания на нескольких компьютерах, которая хорошо подходит для развертывания сложных приложений. Если вам нужно выполнить задачу с помощью Ansible более одного раза, напишите учебник и поместите его в систему управления версиями. Затем вы можете использовать плейбук для запуска новой конфигурации или подтверждения конфигурации удаленных систем. Учебники в репозитории ansible-примеры иллюстрируют множество полезных приемов. Возможно, вы захотите просмотреть их на другой вкладке, когда будете читать документацию.

Playbooks :

* объявить конфигурации
* организуйте этапы любого процесса, упорядоченного вручную, на нескольких наборах машин в определенном порядке
* запускайте задачи синхронно или асинхронно

Синтаксис playbook:
"""""""""""""""""""""

Playbooks представлены в формате YAML с минимальным синтаксисом. 

Playbook состоит из одной или нескольких "play" в упорядоченном списке. Каждая play выполняет часть общей цели playbook, выполняя одну или несколько задач. Каждая задача вызывает модуль Ansible.

Выполнение Playbook
"""""""""""""""""""""""

Playbook выполняется по порядку сверху вниз. В каждом блоке задания также выполняются по порядку сверху вниз. Игровые книги с несколькими "играми" могут организовывать развертывание на нескольких компьютерах, запуская одну игру на ваших веб-серверах, затем другую игру на серверах баз данных, затем третью игру в вашей сетевой инфраструктуре и так далее. Как минимум, каждая пьеса определяет две вещи:

* управляемые узлы, на которые нужно нацелиться, используя шаблон
* как минимум одна задача для выполнения

Пример:
''''''''
1 play: цель - web server
2 play: цель - сервер баз данных

::

        ---
        - name: Update web servers
          hosts: webservers
          remote_user: root

          tasks:
          - name: Ensure apache is at the latest version
            ansible.builtin.yum:
              name: httpd
              state: latest
          - name: Write the apache config file
            ansible.builtin.template:
              src: /srv/httpd.j2
              dest: /etc/httpd.conf

        - name: Update db servers
          hosts: databases
          remote_user: root

          tasks:
          - name: Ensure postgresql is at the latest version
            ansible.builtin.yum:
              name: postgresql
              state: latest
          - name: Ensure that postgresql is started
            ansible.builtin.service:
              name: postgresql
              state: started


