Булевы значения
~~~~~~~~~~~~~~~~~~~~~

Bool — это логический тип данных в Python, который принимает два значения: истину и ложь.

В Python есть самостоятельный логический тип bool с двумя предопределёнными значениями:

True — истина;

False — ложь.

True и False пишутся с большой буквы. Если написать с маленькой, интерпретатор выдаст ошибку.

True и False являются экземплярами класса bool, который в свою очередь является подклассом int. Поэтому True и False в Python ведут себя как числа 1 и 0. Отличие только в том, как они выводятся на экран.

Булев тип важен для любого языка программирования. При помощи булевой логики код может реагировать на различные данные внутри программы и выполнять выбранные инструкции при разных обстоятельствах.


В Python истинными и ложными значениями считаются не только True и False.

истинное значение:

- любое ненулевое число

- любая непустая строка

- любой непустой объект

ложное значение:

- 0

- None

- пустая строка

- пустой объект

Остальные истинные и ложные значения, как правило, логически следуют из условия.

Для проверки булевого значения объекта, можно воспользоваться bool:


Логический тип и операторы
"""""""""""""""""""""""""""

Операторы сравнения и логические операторы, т.к. результатом их выполнения являются  **True** или **False**.

**Операторы сравнения:**





Все выражения типизированы. Тип выражения определяется типом
возвращаемого значения. Операция, применяемая к одному операнду, называется *унарной*, а операция с двумя операндами – *бинарной*. Например **–а** – унарная, а **b + c** – бинарная.

Вычислений в выражениях составляют основу подавляющего большинства программ. Для этой цели Python использует 6 основных операций, каждая из которых имеет свой знак. Вот эти операции, они выполняются над числовыми значениями:


.. figure:: img/01_type_02.PNG
       :scale: 100 %
       :align: center
       :alt: asda

Пример:

::

        print(5 / 3)
        print(5 // 3)
        print(5 % 3)
        print(5 ** 67)

        
.. figure:: img/01_type_03.PNG
       :scale: 100 %
       :align: center
       :alt: asda
                
Тип результата выполнения выражения будет зависеть от типа операндов, входящих в это выражение:


.. figure:: img/01_type_04.PNG
       :scale: 100 %
       :align: center
       :alt: asda

В данном случае происходит неявное преобразование типов, то есть прораммист в этом не участвует:

Пример:

::

        # Python automatically converts 
        # a to int 
        a = 7
        print(type(a)) 

        # Python automatically converts 
        # b to float 
        b = 3.0
        print(type(b)) 

        # Python automatically converts 
        # c to float as it is a float addition 
        c = a + b 
        print(c) 
        print(type(c))

        # Python automatically converts 
        # d to float as it is a float multiplication
        d = a * b
        print(d)
        print(type(d))

При вычислении математических выражений Python придерживается
приоритета операций.


.. figure:: img/01_type_05.PNG
       :scale: 100 %
       :align: center
       :alt: asda

Пример:

::

        print(-2 ** 4 + 100)
        print(-(2 ** 4 + 100))
        print((-2) ** 4 + 100)      


.. figure:: img/01_type_05.PNG
       :scale: 100 %
       :align: center
       :alt: asda

У типа данных **float** есть особенность, связанная с представлением этого типа данных в компьютере. 
Числа с плавающей точкой представлены в компьютерах в виде двоичных дробей. На большинстве современных машин числа с плавающей запятой аппроксимируются с использованием двоичной дроби, а числитель использует первые 53 бита, начиная с самого старшего бита, а знаменатель - как степень двух. В случае 1/10 двоичная дробь равна 3602879701896397/2 ** 55, что близко, но не точно равно истинному значению 1/10.

 Python печатает только десятичное приближение к истинному десятичному значению двоичного приближения, хранящегося на машине. 

.. figure:: img/01_type_08.PNG
       :scale: 100 %
       :align: center
       :alt: asda


Подробнее можно ознакомиться в `метериале <https://docs-python.ru/tutorial/operatsii-chislami-python/problemy-chisel-plavajuschej-zapjatoj/>`__ 
    
    
Переменные
"""""""""""

В выражениях используются переменные:

::

        x = 1
        y = 3
        c = x + y - 5

Переменные предназначены для хранения данных. 
Название переменной в Python должно начинаться с алфавитного символа или со знака подчеркивания и может содержать алфавитно-цифровые символы и знак подчеркивания. Другое название имени – **идентификатор**

Переменная представляет собой ссылку на объект, работающий сразу после размещения в памяти. Переменные в Python
ссылаются на объекты и представляют собой некоторые величины, которые могут менять не только свои значения (ссылаться на другие объекты), но и их тип (динамическая типизация)

Пример:

::

        # Создание переменной
        a = 1
        # Вывод значения переменной
        print(a)
        # Вывод адреса переменной
        print(id(a))
        # Вывод типа переменной
        print(type(a))

        
        a = 5.0
        # Тип переменной
        print(type(a))

Функции
"""""""

Функция в программировании — это фрагмент кода, который можно вызвать на исполнение из другого места программы, когда он понадобится.

Обычно у функции есть имя, и она принимает на вход один или несколько параметров. Также функции могут возвращать или не возвращать какие-либо значения.

Функции бывают:

- встроенные — они доступны в Python по умолчанию;
- вызываемые из импортируемых модулей.

Пример:


::

        d = 1
        n = 3
        print(abs(d - n))
        print(abs(-9) + abs(5.6))

        
.. figure:: img/01_type_07.PNG
       :scale: 100 %
       :align: center
       :alt: asda


Числа используются в разных вычислениях, но большинство из них - это математические.

Стандартные функции
""""""""""""""""""""

**abs(x)** - модуль чиcла

**round(x)** - возвращает число с плавающей точкой, округленное до 0 цифр в дробной части

**int(x)** - возвращает целое число, построенное из числа или строки

**float(x)** - возвращает число с плавающей точкой, построенное из числа или строки

**pow(x,y)** - возвращает значение x в степени y, эквивалентно записи x**y 


Встроенные
"""""""""""

Встроенный модуль **math** в Python предоставляет набор функций для выполнения математических, тригонометрических и логарифмических операций. Некоторые из основных функций модуля:

::

        import math


sqrt(num) - квадратный корень числа num

ceil(num) - округление числа до ближайшего наибольшего целого

floor(num) - округление числа до ближайшего наименьшего целого

factorial(num) - факториал числа

degrees(rad) - перевод из радиан в градусы

radians(grad) - перевод из градусов в радианы

cos(rad) - косинус угла в радианах

sin(rad) - синус угла в радианах

tan(rad) - тангенс угла в радианах

acos(rad) - арккосинус угла в радианах

asin(rad) - арксинус угла в радианах

atan(rad) - арктангенс угла в радианах

log(n, base) - логарифм числа n по основанию base

log10(n) - десятичный логарифм числа n

Примеры:

::

        import math

        import math
 
        # возведение числа 2 в степень 3
        n1 = math.pow(2, 3)
        print(n1)  
         
        # ту же самую операцию можно выполнить так
        n2 = 2 ** 3
        print(n2)
         
        # квадратный корень числа
        print(math.sqrt(9))  
         
        # ближайшее наибольшее целое число
        print(math.ceil(4.56))
         
        # ближайшее наименьшее целое число
        print(math.floor(4.56))
         
        # перевод из радиан в градусы
        print(math.degrees(3.14159))
         
        # перевод из градусов в радианы
        print(math.radians(180))   

        # косинус
        print(math.cos(math.radians(60))) 
        
        # cинус
        print(math.sin(math.radians(90)))   
        
        # тангенс
        print(math.tan(math.radians(0)))   
         
        print(math.log(8,2))   
        print(math.log10(100))    


Подробнее `math <https://docs.python.org/3/library/math.html>`__
