Словари
~~~~~~

Отображения – это коллекции объектов, доступ к которым осуществляется не по определенным смещениям от начала коллекции (индексам), а по ключам. В действительности отображения вообще не подразумевают какого-либо упорядочения элементов по их позиции, они просто отображают ключи на связанные с ними значения. Словари – единственный тип отображения в наборе базовых объектов Python – также относятся к классу изменяемых объектов: они могут изменяться непосредственно и в случае необходимости могут увеличиваться и уменьшаться в размерах подобно спискам.

**Словарь** в Python является **неупорядоченной изменяемой** коллекцией, в которой доступ к элементам происходит по ключу. Ключ может принимать значения любого 
неизменяемого типа – **int, float, str, tuple**. Данные в словаре хранятся в формате *ключ – значение*.

В жизни примерами словарей являются структуры данных:

- Телефонный справочник. В нем ключом является имя, а значением — номер телефона. 
- Маршруты поездов или авиарейсы, идентифицируются численно-буквенным кодом.

Примеры словарей:

{'country': 'Russia'}

'country' - ключ
'Russia' - значение

{1 : 'Строки', 2 : 'Списки', 3: 'Словари'}

.. code:: python

   london = {'name': 'London1', 
   'location': 'London Str', 
   'vendor': 'Cisco'}

Словари заключены в **фигурные скобки {}**

Ключи являются уникальными, повторяться они не могут. Если данному ключу ставится в соответствие другое значение, старое удаляется.

Элементы словаря разделены запятыми.

Создание словаря
`````````````````

**С помощью литерала**

products = {1: 'овощи', 2: 'фрукты', 3: 'молочные продукты'} 

books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}

**Конструктор**

phone_numbers = dict()

dict.fromkeys
``````````````
Когда надо создать словарь с известными ключами, но неизвестными или одинаковыми значениями :

.. code:: python

   d_keys = ['host', 'location', 'ip', 'mac']
   serv = dict.fromkeys(d_keys)
   print(serv)

   {'host': None, 'location': None, 'ip': None, 'mac': None}


Добавление элемента в словарь
```````````````````````````````

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   print(phone_numbers)

   {'Иванов': '89882563698', 'Петров': '89882585656'}

Ключ элемента указывается в квадратных скобках, значение - после знака присваивания.

В словаре хранится последнее присвоенное значение по ключу:

.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   phone_numbers['Иванов'] = 'unknown'
   print(phone_numbers)

   {'Иванов': 'unknown', 'Петров': '89882585656'}


Получение значения из словаря
````````````````````````````````
.. code:: python

   phone_numbers = dict()
   # Добавление элемента
   phone_numbers['Иванов'] = '89882563698'
   phone_numbers['Петров'] = '89882585656'
   # Получить значение
   print(phone_number['Петров'])
   
   89882585656



.. code:: python

   books = {'Достоевский': ['Идиот', 'Бесы', 'Бедные люди'], 
             'Тургенев': ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']}
   # Напечатать все книги Тургенева
   print(books['Тургенев'])
   # Напечать первую в списке книжку Тургенева
   print(books['Тургенев'][0])

   ['Отцы и дети', 'Записки охотника', 'Дворянское гнездо']
   Отцы и дети

Удаление элемента
```````````````````
**del**

.. code:: python

   del  phone_numbers['Иванов']











        






Списки – это самое общее представление последовательностей, реализованных в языке Python

Список (list) − **упорядоченная изменяемая коллекция**, которая позволяет хранить и обрабатывать последовательность объектов необязательно одного и того же типа.

В отличие от строк, списки могут содержать объекты любых типов: числа, строки и даже другие списки. Кроме того, в отличие 
от строк, списки могут изменяться непосредственно, с помощью операции присваивания по смещениям и срезам, с помощью методов списков, с использованием инструкций удаления и другими способами – списки являются изменяемыми объектами.

Размеры списков не ограничены.

Списки относятся к категории **ИЗМЕНЯЕМЫХ** объектов, поэтому они поддерживают операции, которые изменяют сам список *непосредственно*.

Списки могут быть использованы в случае:

- необходимости хранения большого количества входных данных (1000 переменных − это неудобно);
- отсутствия информации о количестве данных;
- необходимости структурировать данные в виде таблицы;

Примеры списков:

.. code:: python

        list1 = [10, 20, 30, 77]
        list2 = ['one', 'dog', 'seven']
        list3 = [1, 20, 4.0, 'word']

Каждый элемент списка имеет свой **индекс**.


.. figure:: img/04_list_01.PNG
       :scale: 100 %
       :align: center
       :alt: asda

Индексы элементов начинаются с **нуля**

Отличительной особенностью списков являются **квадратные скобки []**


Создание списка
````````````````

**Перечисление**

summ_days = [1000, 2000, 2500, 3500]

**Пустой спиcок**

employeers = []

managers = list()

Так как списки являются последовательностями, то к ним применимы все операции, применимые к последовательностям, например, строкам.

**Создание списка разбиением строки**

.. code:: python

        str1 = 'Мама мыла раму'
        list_str1 = str1.split()
        print(list_str1)

Результат:

['Мама', 'мыла', 'раму']

**Создание списка из строки**

.. code:: python

        str1 = 'Мама'
        list_str1 = list(str1)
        print(list_str1)

Результат:

['М', 'а', 'м', 'а']


Доступ к элементу
````````````````````
Доступ к элементу осуществляется указанием имени списка и индекса, заключенного в квадратные скобки

**list1[1]**


.. code:: python

        list1 = [10, 20, 30, 77]
        # печать списка
        print(list1)
        # Печать первого элемента
        print(list[1])

Результат:

[10, 20, 30, 77]

20

Длина списка
`````````````
**len(имя_списка)**

.. code:: python

        list1 = [10, 20, 30, 77]
        # Печать длины списка
        print(len(list1))

Результат:

4

Взятие среза
`````````````

.. code:: python

        list1 = [10, 20, 30, 77]
        # Печать длины списка
        part1 = list1[:2]
        print(part1)

Результат:

[10, 20]


Объединение списков
`````````````````

.. code:: python

        # Создание и печать пустого списка
        managers = list()
        print(managers)
        # Сложение списков
        managers = managers + ['Иванов', 'Петров', 'Сидоров']
        # вывод списка
        print(managers)
        # вывод типа объекта
        print(type(managers))

Результат:

[]

['Иванов', 'Петров', 'Сидоров']

<class 'list'>


Изменение списка
```````````````````

Так как список является изменяемой последовательностью, то его можно изменять без создания нового объекта

.. code:: python

        list1 = [10, 20, 30, 77]
        print(list1)
        list1[0] = 5
        print(list1)


Результат:

[10, 20, 30, 77]

[5, 20, 30, 77]


Распаковка списка
``````````````````

.. code:: python

        a, b, c, d = [10, 20, 30, 77]
        print(a)
        print(b)
        print(c)
        print(d)

Результат:

10

20

30

77

Встроенные функции для списков Python
"""""""""""""""""""""""""""""""""""""""


sorted()
`````````

Возвращает отсортированный список:

.. code:: python

        a = [8, 1, 3, 2]
        sorted(a) # [1, 2, 3, 8]
        
min() и max()
````````````````

Возвращают наименьший и наибольший элемент списка:

.. code:: python

        a = [1, 9, -2, 3]
        min(a) # -2
        max(a) # 9


.. toctree::
   :maxdepth: 1
   :hidden:

   list_methods
   list_examples
