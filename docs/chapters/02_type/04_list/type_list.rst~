Списки
~~~~~~

Списки – это самое общее представление последовательностей, реализованных в языке Python

Список (list) − **упорядоченная изменяемая коллекция**, которая позволяет хранить и обрабатывать последовательность объектов необязательно одного и того же типа.

В отличие от строк, списки могут содержать объекты любых типов: числа, строки и даже другие списки. Кроме того, в отличие 
от строк, списки могут изменяться непосредственно, с помощью операции присваивания по смещениям и срезам, с помощью методов списков, с использованием инструкций удаления и другими способами – списки являются изменяемыми объектами.

Размеры списков не ограничены.

Списки относятся к категории **ИЗМЕНЯЕМЫХ** объектов, поэтому они поддерживают операции, которые изменяют сам список *непосредственно*.

Списки могут быть использованы в случае:

- необходимости хранения большого количества входных данных (1000 переменных − это неудобно);
- отсутствия информации о количестве данных;
- необходимости структурировать данные в виде таблицы;

Примеры списков:

.. code:: python

        list1 = [10, 20, 30, 77]
        list2 = ['one', 'dog', 'seven']
        list3 = [1, 20, 4.0, 'word']

Каждый элемент списка имеет свой **индекс**.


.. figure:: img/04_list_01.PNG
       :scale: 100 %
       :align: center
       :alt: asda

Индексы элементов начинаются с **нуля**

Отличительной особенностью списков являются **квадратные скобки []**


Создание списка
````````````````

**Перечисление**

summ_days = [1000, 2000, 2500, 3500]

**Пустой спиcок**

employeers = []

managers = list()

Так как списки являются последовательностями, то к ним применимы все операции, применимые к последовательностям, например, строкам.

**Создание списка разбиением строки**

.. code:: python

        str1 = 'Мама мыла раму'
        list_str1 = str1.split()
        print(list_str1)

Результат:

['Мама', 'мыла', 'раму']

**Создание списка из строки**

.. code:: python

        str1 = 'Мама'
        list_str1 = list(str1)
        print(list_str1)

Результат:

['М', 'а', 'м', 'а']


Доступ к элементу
````````````````````
Доступ к элементу осуществляется указанием имени списка и индекса, заключенного в квадратные скобки

**list1[1]**


.. code:: python

        list1 = [10, 20, 30, 77]
        # печать списка
        print(list1)
        # Печать первого элемента
        print(list[1])

Результат:

[10, 20, 30, 77]

20

Длина списка
`````````````
**len(имя_списка)**

.. code:: python

        list1 = [10, 20, 30, 77]
        # Печать длины списка
        print(len(list1))

Результат:

4

Взятие среза
`````````````

.. code:: python

        list1 = [10, 20, 30, 77]
        # Печать длины списка
        part1 = list1[:2]
        print(part1)

Результат:

[10, 20]


Объединение списков
`````````````````

.. code:: python

        # Создание и печать пустого списка
        managers = list()
        print(managers)
        # Сложение списков
        managers = managers + ['Иванов', 'Петров', 'Сидоров']
        # вывод списка
        print(managers)
        # вывод типа объекта
        print(type(managers))

Результат:

[]

['Иванов', 'Петров', 'Сидоров']

<class 'list'>


Изменение списка
```````````````````

Так как список является изменяемой последовательностью, то его можно изменять без создания нового объекта

.. code:: python

        list1 = [10, 20, 30, 77]
        print(list1)
        list1[0] = 5
        print(list1)


Результат:

[10, 20, 30, 77]

[5, 20, 30, 77]


Распаковка списка
``````````````````

.. code:: python

        a, b, c, d = [10, 20, 30, 77]
        print(a)
        print(b)
        print(c)
        print(d)

Результат:

10

20

30

77

Встроенные функции для списков Python
"""""""""""""""""""""""""""""""""""""""


sorted()
`````````

Возвращает отсортированный список:

.. code:: python

        a = [8, 1, 3, 2]
        sorted(a) # [1, 2, 3, 8]
        
min() и max()
````````````````

Возвращают наименьший и наибольший элемент списка:

.. code:: python

        a = [1, 9, -2, 3]
        min(a) # -2
        max(a) # 9



Методы списков
"""""""""""""""

append()
````````

Добавляет новый элемент в конец списка:

.. code:: python

        a = [1, 2, 3]
        a.append(4)
        print(a) 

[1, 2, 3, 4]

  
extend()
`````````
Добавляет набор элементов в конец списка.

В качестве аргумента методу необходимо передать итерируемый объект, например, список или строку:

.. note:: Итератор в python — это любой объект, реализующий метод __next__ без аргументов, который должен вернуть следующий элемент.

.. code:: python

        a = [1, 2, 3]
        a.extend([4, 5])
        print(a) 

[1, 2, 3, 4, 5]

Внутрь метода extend() нужно передать итерируемый объект — например, другой list или строку.

Добавление строки:

.. code:: python

        a = ['cat', 'dog', 'bat']
        a.extend('mouse')
        print(a)

['cat', 'dog', 'bat', 'm', 'o', 'u', 's', 'e']


insert()
``````````
Добавляет новый элемент по индексу:

.. code:: python

        a = [1, 2, 3]
        a.insert(0, 4)
        print(a)

[4, 1, 2, 3]

Первый параметр - индекс элемента, второй - значение элемента.

remove()
`````````

Удаление элемент из списка (первое вхождение). Если элемент отсутсвует, то будет возвращена ошибка.

.. code:: python

        a = [1, 2, 3, 1]
        a.remove(1)
        print(a) 

[2, 3, 1]

.. code:: python

        a = [1, 2, 3, 1]
        a.remove(5)

        Traceback (most recent call last):
        File "<stdin>", line 1, in <module>
        ValueError: list.remove(x): x not in list

clear()
``````````

Очистка списка (удаление всех элементов):

.. code:: python

        a = [1, 2, 3]
        a.clear()
        print(a) 

[]

index()
````````

Возвращает индекс элемента списка в Python:

.. code:: python

        a = [1, 2, 3]
        print(a.index(2)) 

1

Если элемента нет в списке, выведется ошибка:

.. code:: python

        a = [1, 2, 3]
        print(a.index(4))
        Traceback (most recent call last):
          File "<stdin>", line 1, in <module>
        ValueError: 4 is not in list

pop()
``````
Возвращает элемент с указанным индексом и удаляет его из списка. Если индекс не указан, то удаляется последний.

.. code:: python

        a = [1, 2, 3]
        print(a.pop())
        print(a)

        3
        [1, 2]

.. code:: python

        a = [1, 2, 3]
        print(a.pop(1)) 
        print(a) 

        2
        [1, 3]

count()
``````````
Возвращает число вхождений элемента в список:

.. code:: python

        a = [1, 1, 1, 2]
        print(a.count(1)) 

3

sort()
```````
Сортировка списка с его изменением:

.. code:: python

        a = [4, 1, 5, 2]
        a.sort() # [1, 2, 4, 5]

Параметр reverse - обратная сортировка:

.. code:: python

        a = [4, 1, 5, 2]
        a.sort(reverse=True) # [5, 4, 2, 1]

reverse()
``````````
Переставляет элементы в обратном порядке:

.. code:: python

        a = [1, 3, 2, 4]
        a.reverse() 

[4, 2, 3, 1]

copy()
`````````
Копирование списка(создание полной копии в новом объекте):

.. code:: python

        a = [1, 2, 3]
        b = a.copy()
        print(b)

[1, 2, 3]








.. figure:: img/04_list_01.PNG
       :scale: 100 %
       :align: center
       :alt: asda


Строковый тип данных — это последовательности символов Unicode любой длины, заключённые в одинарные, двойные или тройные кавычки. Символами могут быть буквы, числа, знаки препинания, специальные символы и так далее. Главное — чтобы их с двух сторон окружали кавычки. В Python текстовый тип данных обозначается буквами str (от англ. string — строка).

Unicode - cтандарт кодирования символов, включающий в себя знаки почти всех письменных языков мира.

Вывод символа Unicode

.. figure:: img/03_str_02.PNG
       :scale: 100 %
       :align: center
       :alt: asda


.. important::  Строки в Python — **НЕИЗМЕНЯЕМЫЙ** тип данных. Строковую переменную нельзя изменить с помощью операторов, функций и методов. Для изменения существующей строки необходимо создать создать новую переменную. Они относятся к **Immutable** объектам.

Примеры строк:

.. code-block:: python
   
        'Это строка'
        "Это строка"
        """
           это
           строка
        """

Строка состоит из символов. Каждый символ строки имеет свой порядковый номер - индекс.

Нумерация символов начинается с нуля.
Обращение к любому символу строки по индексу выполняется указанием имени строки и индекса в квадратных скобках:

.. code-block::  python

        s = 'Программирование - вторая грамотность!'
        # выведет 'П'
        print(s[0])
        # выведет '!'
        print(s[-1])


**Нулевой индекс** – первая буква строки, а **-1** – последний индекс строки.   

Следующая программа выдаст ошибку:


.. figure:: img/03_str_01.PNG
       :scale: 100 %
       :align: center
       :alt: asda

Была предпринята попытка изменить строку, а это **НЕИЗМЕНЯЕМЫЙ** объект.

Если необходимо изменить строку, то потребуется создать новую:

.. code-block::  python

        s = 'Программирование - вторая грамотность!'
        print(s)
        print('Адрес строки - 'id(s))
        s = 'Программирование - вторая грамотность?'
        print(s)
        print('Адрес строки - ', id(s))
        print(s[-1])

Из вывода видно, что адрес изменился, при этом старое содержание было потеряно и уничтожено, а на новом месте создана новая переменная.

Срезы
`````

Cрезом строки является ее непрерывная часть от одного индекса включительно и до другого **не включительно**. Cрез записывается с помощью квадратных скобок, в которых указывается начальный 
и конечный индекс, разделенные двоеточием. Если не указан начальный индекс, 
срез берется от начального символа строки. Если не указан конечный индекс, 
срез берется до конечного символа строки.

**Пример:**

.. code-block::  python

        s = 'Jupyter Notebook - интерактивный блокнот'
        print(s[8:16]) # выведет 'Notebook'
        print(s[:7]) # выведет 'Jupyter'
        print(s[-3:]) # выведет 'нот'
        print(s[:]) # выведет всю строку
        print(s[::-1]) # выведет развернутую строку

.. figure:: img/03_str_03.PNG
       :scale: 100 %
       :align: center
       :alt: asda
    
- s[8:16] – срез строки s, начиная с индекса 8, заканчивая индексом 16 (не включая символ с индексом 16)
- s[:7] срез с 0 индекса по 6-ий включительно (7-не включается)
- s[-3:] срез с 3 с конца индекса до конца строки
- s[:] срез с 0 индекса по последний
- s[::-1] разворот строки

Функция **len** позволяет получить количество символов в строке:

.. code-block::  python

        # Запрос строки с клавиатуры
        s = input()
        # Вычисление длины строки
        count_symbols = len(s)
        # Вывод результата в формате f-строки
        print(f'Строка {s} содержит {count_symbols } сиволов')

        
.. figure:: img/03_str_04.PNG
       :scale: 100 %
       :align: center
       :alt: asda


.. toctree::
   :maxdepth: 1
   :hidden:

   string_methods
   string_examples


